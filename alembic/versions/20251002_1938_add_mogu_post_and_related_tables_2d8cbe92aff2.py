"""add mogu_post and related tables

Revision ID: 2d8cbe92aff2
Revises: 3c0a75ee406e
Create Date: 2025-10-02 19:38:18.183434

"""

import geoalchemy2
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "2d8cbe92aff2"
down_revision = "3c0a75ee406e"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # 새로운 enum 타입 생성 (기존에 없는 것만)
    op.execute(
        """
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'post_status_enum') THEN
                CREATE TYPE post_status_enum AS ENUM ('draft', 'recruiting', 'locked', 'purchasing', 'distributing', 'completed', 'canceled');
            END IF;
        END
        $$;
    """
    )
    op.execute(
        """
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'participation_status_enum') THEN
                CREATE TYPE participation_status_enum AS ENUM ('applied', 'accepted', 'rejected', 'canceled', 'no_show', 'fulfilled');
            END IF;
        END
        $$;
    """
    )

    op.create_table(
        "mogu_post",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("user_id", sa.String(length=36), nullable=False),
        sa.Column("title", sa.Text(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("price", sa.BigInteger(), nullable=False),
        sa.Column(
            "category",
            postgresql.ENUM(
                "생활용품",
                "식품/간식류",
                "패션/잡화",
                "뷰티/헬스케어",
                name="category_enum",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "mogu_market",
            postgresql.ENUM(
                "코스트코",
                "이마트",
                "트레이더스",
                "노브랜드",
                "편의점",
                "홈플러스",
                "동네마켓",
                "전통시장",
                "이커머스",
                "기타",
                name="market_enum",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "mogu_spot",
            geoalchemy2.types.Geography(
                geometry_type="POINT",
                srid=4326,
                from_text="ST_GeogFromText",
                name="geography",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column("mogu_datetime", sa.DateTime(timezone=True), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM(
                "draft",
                "recruiting",
                "locked",
                "purchasing",
                "distributing",
                "completed",
                "canceled",
                name="post_status_enum",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("target_count", sa.BigInteger(), nullable=True),
        sa.Column("joined_count", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["app_user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    # PostGIS spatial index with IF NOT EXISTS
    op.execute(
        "CREATE INDEX IF NOT EXISTS idx_mogu_post_mogu_spot ON mogu_post USING gist (mogu_spot)"
    )
    op.create_index(
        op.f("ix_mogu_post_user_id"), "mogu_post", ["user_id"], unique=False
    )
    op.create_table(
        "mogu_post_image",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("mogu_post_id", sa.String(length=36), nullable=False),
        sa.Column("image_url", sa.Text(), nullable=False),
        sa.Column("sort_order", sa.BigInteger(), nullable=False),
        sa.Column("is_thumbnail", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["mogu_post_id"], ["mogu_post.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_mogu_post_image_mogu_post_id"),
        "mogu_post_image",
        ["mogu_post_id"],
        unique=False,
    )
    op.create_table(
        "participation",
        sa.Column("user_id", sa.String(length=36), nullable=False),
        sa.Column("mogu_post_id", sa.String(length=36), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM(
                "applied",
                "accepted",
                "rejected",
                "canceled",
                "no_show",
                "fulfilled",
                name="participation_status_enum",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "applied_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("decided_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["mogu_post_id"], ["mogu_post.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["app_user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id", "mogu_post_id"),
    )
    op.create_table(
        "question_answer",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("mogu_post_id", sa.String(length=36), nullable=False),
        sa.Column("questioner_id", sa.String(length=36), nullable=False),
        sa.Column("question", sa.Text(), nullable=False),
        sa.Column("answerer_id", sa.String(length=36), nullable=True),
        sa.Column("answer", sa.Text(), nullable=True),
        sa.Column("is_private", sa.Boolean(), nullable=False),
        sa.Column(
            "question_created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("answer_created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["answerer_id"], ["app_user.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["mogu_post_id"], ["mogu_post.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["questioner_id"], ["app_user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_question_answer_mogu_post_id"),
        "question_answer",
        ["mogu_post_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_question_answer_questioner_id"),
        "question_answer",
        ["questioner_id"],
        unique=False,
    )
    op.create_table(
        "rating",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("mogu_post_id", sa.String(length=36), nullable=False),
        sa.Column("reviewer_id", sa.String(length=36), nullable=False),
        sa.Column("reviewee_id", sa.String(length=36), nullable=False),
        sa.Column("stars", sa.BigInteger(), nullable=False),
        sa.Column("keywords", sa.ARRAY(sa.Text()), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["mogu_post_id"], ["mogu_post.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["reviewee_id"], ["app_user.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["reviewer_id"], ["app_user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_rating_mogu_post_id"), "rating", ["mogu_post_id"], unique=False
    )
    op.create_index(
        op.f("ix_rating_reviewee_id"), "rating", ["reviewee_id"], unique=False
    )
    op.create_index(
        op.f("ix_rating_reviewer_id"), "rating", ["reviewer_id"], unique=False
    )
    # 평가는 (게시물, 평가자, 피평가자) 조합으로 한 번만 가능
    op.create_unique_constraint(
        "uq_rating_post_reviewer_reviewee",
        "rating",
        ["mogu_post_id", "reviewer_id", "reviewee_id"],
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("uq_rating_post_reviewer_reviewee", "rating", type_="unique")
    op.drop_index(op.f("ix_rating_reviewer_id"), table_name="rating")
    op.drop_index(op.f("ix_rating_reviewee_id"), table_name="rating")
    op.drop_index(op.f("ix_rating_mogu_post_id"), table_name="rating")
    op.drop_table("rating")
    op.drop_index(
        op.f("ix_question_answer_questioner_id"), table_name="question_answer"
    )
    op.drop_index(op.f("ix_question_answer_mogu_post_id"), table_name="question_answer")
    op.drop_table("question_answer")
    op.drop_table("participation")
    op.drop_index(op.f("ix_mogu_post_image_mogu_post_id"), table_name="mogu_post_image")
    op.drop_table("mogu_post_image")
    op.drop_index(op.f("ix_mogu_post_user_id"), table_name="mogu_post")
    op.execute("DROP INDEX IF EXISTS idx_mogu_post_mogu_spot")
    op.drop_table("mogu_post")

    # enum 타입 삭제
    op.execute("DROP TYPE IF EXISTS participation_status_enum")
    op.execute("DROP TYPE IF EXISTS post_status_enum")
    # ### end Alembic commands ###
