"""Remove UserKeywordStats table - use real-time aggregation instead

Revision ID: e6576188d588
Revises: 1e306a85a103
Create Date: 2025-10-05 21:42:19.306231

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "e6576188d588"
down_revision = "1e306a85a103"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("idx_user_keyword_stats_keyword_code"), table_name="user_keyword_stats"
    )
    op.drop_index(
        op.f("idx_user_keyword_stats_user_id"), table_name="user_keyword_stats"
    )
    op.drop_table("user_keyword_stats")
    op.alter_column(
        "app_user",
        "wish_times",
        existing_type=postgresql.ARRAY(sa.INTEGER()),
        type_=sa.ARRAY(sa.BigInteger()),
        comment=None,
        existing_comment="모구 거래 선호 시간대 배열 [0]*24 (선택한 시간대는 1, 선택하지 않은 시간대는 0)",
        existing_nullable=False,
    )
    op.drop_index(op.f("idx_mogu_favorite_mogu_post_id"), table_name="mogu_favorite")
    op.drop_index(op.f("idx_mogu_favorite_user_id"), table_name="mogu_favorite")
    op.drop_table_comment(
        "mogu_favorite", existing_comment="모구 게시물 찜하기", schema=None
    )
    op.drop_constraint(
        op.f("uq_rating_post_reviewer_reviewee"), "rating", type_="unique"
    )
    op.alter_column(
        "rating_keyword_master",
        "id",
        existing_type=sa.INTEGER(),
        type_=sa.BigInteger(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "rating_keyword_master",
        "code",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="키워드 코드 (예: friendly_communication)",
        existing_nullable=False,
    )
    op.alter_column(
        "rating_keyword_master",
        "name_kr",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="한국어 키워드 이름",
        existing_nullable=False,
    )
    op.alter_column(
        "rating_keyword_master",
        "type",
        existing_type=postgresql.ENUM(
            "positive", "negative", name="rating_keyword_type_enum"
        ),
        comment=None,
        existing_comment="positive 또는 negative",
        existing_nullable=False,
    )
    op.drop_constraint(
        op.f("rating_keyword_master_code_key"), "rating_keyword_master", type_="unique"
    )
    op.create_index(
        op.f("ix_rating_keyword_master_code"),
        "rating_keyword_master",
        ["code"],
        unique=True,
    )
    op.drop_table_comment(
        "rating_keyword_master",
        existing_comment="평가 키워드 마스터 데이터",
        schema=None,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        "rating_keyword_master",
        "평가 키워드 마스터 데이터",
        existing_comment=None,
        schema=None,
    )
    op.drop_index(
        op.f("ix_rating_keyword_master_code"), table_name="rating_keyword_master"
    )
    op.create_unique_constraint(
        op.f("rating_keyword_master_code_key"),
        "rating_keyword_master",
        ["code"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "rating_keyword_master",
        "type",
        existing_type=postgresql.ENUM(
            "positive", "negative", name="rating_keyword_type_enum"
        ),
        comment="positive 또는 negative",
        existing_nullable=False,
    )
    op.alter_column(
        "rating_keyword_master",
        "name_kr",
        existing_type=sa.TEXT(),
        comment="한국어 키워드 이름",
        existing_nullable=False,
    )
    op.alter_column(
        "rating_keyword_master",
        "code",
        existing_type=sa.TEXT(),
        comment="키워드 코드 (예: friendly_communication)",
        existing_nullable=False,
    )
    op.alter_column(
        "rating_keyword_master",
        "id",
        existing_type=sa.BigInteger(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.create_unique_constraint(
        op.f("uq_rating_post_reviewer_reviewee"),
        "rating",
        ["mogu_post_id", "reviewer_id", "reviewee_id"],
        postgresql_nulls_not_distinct=False,
    )
    op.create_table_comment(
        "mogu_favorite", "모구 게시물 찜하기", existing_comment=None, schema=None
    )
    op.create_index(
        op.f("idx_mogu_favorite_user_id"), "mogu_favorite", ["user_id"], unique=False
    )
    op.create_index(
        op.f("idx_mogu_favorite_mogu_post_id"),
        "mogu_favorite",
        ["mogu_post_id"],
        unique=False,
    )
    op.alter_column(
        "app_user",
        "wish_times",
        existing_type=sa.ARRAY(sa.BigInteger()),
        type_=postgresql.ARRAY(sa.INTEGER()),
        comment="모구 거래 선호 시간대 배열 [0]*24 (선택한 시간대는 1, 선택하지 않은 시간대는 0)",
        existing_nullable=False,
    )
    op.create_table(
        "user_keyword_stats",
        sa.Column(
            "user_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False
        ),
        sa.Column(
            "keyword_code",
            sa.TEXT(),
            autoincrement=False,
            nullable=False,
            comment="rating_keyword_master.code 참조",
        ),
        sa.Column(
            "count",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["keyword_code"],
            ["rating_keyword_master.code"],
            name=op.f("user_keyword_stats_keyword_code_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["app_user.id"],
            name=op.f("user_keyword_stats_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "user_id", "keyword_code", name=op.f("user_keyword_stats_pkey")
        ),
        comment="사용자별 키워드 통계",
    )
    op.create_index(
        op.f("idx_user_keyword_stats_user_id"),
        "user_keyword_stats",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        op.f("idx_user_keyword_stats_keyword_code"),
        "user_keyword_stats",
        ["keyword_code"],
        unique=False,
    )
    # ### end Alembic commands ###
